#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# terminal colors
readonly    NONE=$(tput sgr0)
readonly     RED=$(tput setaf 1)
readonly   GREEN=$(tput setaf 2)
readonly  YELLOW=$(tput setaf 3)
readonly    BLUE=$(tput setaf 4)
readonly MAGENTA=$(tput setaf 5)
readonly    CYAN=$(tput setaf 6)
readonly   WHITE=$(tput setaf 7)

# ------------------------------------------------------------------------------
# functions                                                            functions
# ------------------------------------------------------------------------------

# -------
# failmsg
# -------
#
# This function prints a red colored message via stderr.
#
function failmsg()
{
  # push to stderr
  echo -e "${RED}[FAIL]${NONE} $1" 1>&2
}

# -------
# warnmsg
# -------
#
# This function prints a yellow colored message via stderr.
#
function warnmsg()
{
  # push to stderr
  echo -e "${YELLOW}[WARN]${NONE} $1" 1>&2
}

# -------
# infomsg
# -------
#
# This function prints a blue colored message via stderr.
#
function infomsg()
{
  # push to stderr
  echo -e "${BLUE}[INFO]${NONE} $1" 1>&2
}

# -------
# donemsg
# -------
#
# This function prints a green colored message via stderr.
#
function donemsg()
{
  # push to stderr
  echo -e "${GREEN}[DONE]${NONE} $1" 1>&2
}

# ------------------
# get_inflated_title
# ------------------
#
# $1  mp3 file
#
function get_inflated_title()
{
  eyeD3 -v "$1"           \
  | sed --quiet           \
        --regexp-extended \
        --expression="

          # ARTIST found
          /[^:]+\(TPE1\):/ {

            # crop name
            s|^[^:]+\(TPE1\):[[:space:]]+(.+)>$|ARTIST=\1|

            # append name to hold space
            H

            # branch to end
            b lastline
          }

          # ALBUM found
          /[^:]+\(TALB\):/ {

            # crop album name
            s|^[^:]+\(TALB\):[[:space:]]+(.+)>$|ALBUM=\1|

            # append name to hold space
            H

            # branch to end
            b lastline
          }

          # TITLE found
          /[^:]+\(TIT2\):/ {

            # crop title
            s|^[^:]+\(TIT2\):[[:space:]]+(.+)>$|TITLE=\1|

            # append name to hold space
            H

            # branch to end
            b lastline
          }

          # handle last line
          :lastline $ {

            # copy hold space three times to pattern space
            s/.*/\x00TITLE>\x00\x0A/     ; G ; s/$/\x0A\x00<TITLE\x00\x0A/
            s/$/\x0A\x00ALBUM>\x00\x0A/  ; G ; s/$/\x0A\x00<ALBUM\x00\x0A/
            s/$/\x0A\x00ARTIST>\x00\x0A/ ; G ; s/$/\x0A\x00<ARTIST\x00\x0A/

            # create custom order
            s/\x00TITLE>\x00.*\x0ATITLE=([^\x0A]+).*\x00<TITLE\x00/\1/
            s/\x00ALBUM>\x00.*\x0AALBUM=([^\x0A]+).*\x00<ALBUM\x00/\1/
            s/\x00ARTIST>\x00.*\x0AARTIST=([^\x0A]+).*\x00<ARTIST\x00/\1/

            # remove trailing space
            s/[[:space:]]+$//

            # concatenate lines
            s/\x0A+/ \/ /g

            # squeeze white space
            s/[[:space:]]+/ /g

            # print non-empty lines
            /.+/ p
          }
        "
}

# ------------------------------------------------------------------------------
# options                                                                options
# ------------------------------------------------------------------------------

# set default values
OPMODE="DEFAULT"

# set default values
GENRE="Playlist"
ARTIST="Playlist"
ALBUM=$(date "+%Y-%m-%d+%H:%M:%S")
YEAR=$(date "+%Y")

# set options to accept
readonly KNOWN_OPTIONS=":hva:b:g:y:"

# check passed options
while getopts "$KNOWN_OPTIONS" OPTION "$@"
do

  case "$OPTION" in

    # show help
    "h") OPMODE="SHOW_HELP"
         ;;

    # show version
    "v") OPMODE="SHOW_VERSION"
         ;;

    # ARTIST
    "a") ARTIST="$OPTARG"
         ;;

    # ALBUM
    "b") ALBUM="$OPTARG"
         ;;

    # GENRE
    "g") GENRE="$OPTARG"
         ;;

    # YEAR
    "y") YEAR="$OPTARG"
         ;;

    "?") failmsg "unknown option: -$OPTARG"
         exit 1
         ;;

    ":") failmsg "missing argument: -$OPTARG <argument>"
         exit 1
         ;;

  esac

done

# get number of positional parameters
PPNUM=$(( $# - OPTIND + 1 ))

# check number of positional parameters
if (( PPNUM != 2 )) ; then

  # notify user
  failmsg "exactly two positional parameters needed"

  ## signalize trouble
  exit 1

fi

# drop all parsed options
shift $(( OPTIND - 1 ))

# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

# name positional parameters
PLAYLIST="$1"
TARGETDIR="$2"

# assert trailing slash
TARGETDIR=$(sed -re "s|.+|&/| ; s|//$|/|" <<< "$TARGETDIR")

# check file
if [ ! -f "$PLAYLIST" ] ; then

  # notify user
  failmsg "unable to locate file: \"$PLAYLIST\""

  # signalize trouble
  exit 1

fi

# check target directory
if [ ! -d "$TARGETDIR" ] ; then

  # try to create target directory
  mkdir -p "$TARGETDIR" &>"/dev/null"

  # check if target directory is still missing
  if [ ! -d "$TARGETDIR" ] ; then

    # notify user
    failmsg "unable to locate directory: \"$TARGETDIR\""

    # signalize trouble
    exit 1

  fi

fi

# file counter
COUNTER=0

# get audio files from playlist
sed --regexp-extended \
    --expression="

      # skip empty lines
      /^[[:space:]]*$/ d

      # skip comments
      /^[[:space:]]*#/ d

    " "$PLAYLIST" \
| while IFS='' read -r FILENAME
do

  # step counter
  (( COUNTER += 1 ))

  # check mp3 file
  if [ ! -f "$FILENAME" ] ; then

    # notify user
    failmsg "unable to locate file: \"$FILENAME\""

    # signalize trouble
    exit 1

  fi

  # get first three bytes
  FILEFLAG=$(head -c3 "$FILENAME")

  # check first three bytes
  if [ "$FILEFLAG" != "ID3" ] ; then

    # notify user
    failmsg "this is no mp3 file: $FILENAME"

    # signalize trouble
    exit 1

  fi

  # compile new title
  TITLE=$(get_inflated_title "$FILENAME")
  TITLE=$(printf "%04d - %s" "$COUNTER" "$TITLE")

  # compile new filename
  NEWNAME=$(printf "%s%04d.mp3" "$TARGETDIR" "$COUNTER")

  # show progress
  echo "$NEWNAME  <--  $(basename "$FILENAME")"

  # copy file
  cp --force "$FILENAME" "$NEWNAME"

  # update (remove) current tags
  eyeD3 --no-color              \
        --no-tagging-time-frame \
        --remove-comments       \
        --remove-lyrics         \
        --remove-images         \
        --remove-all            \
        --v2                    \
        --to-v2.3               \
        --genre="$GENRE"        \
        --artist="$ARTIST"      \
        --album="$ALBUM"        \
        --year="$YEAR"          \
        --track="$COUNTER"      \
        --title="$TITLE"        \
        "$NEWNAME"              \
        &>"/dev/null"

done

# signalize success
exit 0

