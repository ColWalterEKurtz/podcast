#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# terminal colors
readonly    NONE=$(tput sgr0)
readonly     RED=$(tput setaf 1)
readonly   GREEN=$(tput setaf 2)
readonly  YELLOW=$(tput setaf 3)
readonly    BLUE=$(tput setaf 4)
readonly MAGENTA=$(tput setaf 5)
readonly    CYAN=$(tput setaf 6)
readonly   WHITE=$(tput setaf 7)

# ------------------------------------------------------------------------------
# functions                                                            functions
# ------------------------------------------------------------------------------

# ---------
# show_help
# ---------
#
#
#
function show_help()
{
  # TODO: more readable version needed...
  sed --quiet           \
      --regexp-extended \
      --expression="

        # crop this part of the script
        /^# HELP>>/,/^# <<HELP/ {

          # skip these lines
          /^# HELP>>/d
          /^# <<HELP/d

          # print line
          p
        }

      " "$0"
}

# -------
# failmsg
# -------
#
# This function prints a red colored message via stderr.
#
function failmsg()
{
  # push to stderr
  echo -e "${RED}[FAIL]${NONE} $1" 1>&2
}

# -------
# warnmsg
# -------
#
# This function prints a yellow colored message via stderr.
#
function warnmsg()
{
  # push to stderr
  echo -e "${YELLOW}[WARN]${NONE} $1" 1>&2
}

# -------
# infomsg
# -------
#
# This function prints a blue colored message via stderr.
#
function infomsg()
{
  # push to stderr
  echo -e "${BLUE}[INFO]${NONE} $1" 1>&2
}

# -------
# donemsg
# -------
#
# This function prints a green colored message via stderr.
#
function donemsg()
{
  # push to stderr
  echo -e "${GREEN}[DONE]${NONE} $1" 1>&2
}

# -----------
# get_integer
# -----------
#
#
#
function get_integer()
{
  # let bc add zero
  sed -nre "s/^(-?)0*([[:digit:]]+)$/\1\2 + 0/p" <<< "$1" | bc 2>"/dev/null"
}

# HELP>>
# ------------------------------------------------------------------------------
# options                                                                options
# ------------------------------------------------------------------------------

# set default values
OPMODE="DEFAULT"
USEWAV="0"
STARTNUM="1"

# set options to accept
readonly KNOWN_OPTIONS=":hn:w"

# check passed options
while getopts "$KNOWN_OPTIONS" OPTION "$@"
do

  case "$OPTION" in

    # show help
    "h") OPMODE="SHOW_HELP"
         ;;

    # set initial number
    "n") STARTNUM="$OPTARG"
         ;;

    # use wav files
    "w") USEWAV="1"
         ;;
    
    "?") failmsg "unknown option: -$OPTARG"
         exit 1
         ;;

    ":") failmsg "missing argument: -$OPTARG <argument>"
         exit 1
         ;;

  esac

done

# get number of positional parameters
PPNUM=$(( $# - OPTIND + 1 ))

# drop all parsed options
shift $(( OPTIND - 1 ))

# <<HELP
# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

# show help and exit
if [ "$OPMODE" == "SHOW_HELP" ] ; then

  # push help to stderr
  show_help 1>&2

  # break pipe
  exit 1

fi

# check number of positional parameters
if (( PPNUM != 1 )) ; then

  # notify user
  failmsg "exactly one filename needed (m3u file)"

  # signalize trouble
  exit 1

fi

# use first positional parameter as filename of the playlist
PLAYLIST="$1"

# check file
if [ ! -f "$PLAYLIST" ]; then

  # notify user
  failmsg "unable to open file: \"$PLAYLIST\""

  # signalize trouble
  exit 1

fi

# the title's position
TRACKNUMBER=$(get_integer "$STARTNUM")

# check track number
if [ -z "$TRACKNUMBER" ]; then

  # notify user
  failmsg "invalid track number: \"$TRACKNUMBER\""

  # signalize trouble
  exit 1

fi

# to buffer the comment that has been extractet most recently
EXTINFBUFFER=""

# read lines
while read -rd $'\0' FILENAME
do

  # check if the header line is read
  if [ "$FILENAME" == "#EXTM3U" ]; then

    # show header
    echo "#EXTM3U"

    # but don't increase counter
    continue
  
  fi

  # check if an empty line is read
  if [ -z "$FILENAME" ]; then

    # show empty line
    echo

    # but don't increase counter
    continue
  
  fi

  # check if a comment is read
  if [ "${FILENAME:0:7}" == "#EXTINF" ]; then

    # buffer comment
    EXTINFBUFFER="$FILENAME"

    # but don't increase counter
    continue
  
  fi

  # check flag
  if [ "$USEWAV" == "1" ] ; then

    # get spoken number (wav version)
    SPEECHFILE=$(../numbers/getnumber -w "$TRACKNUMBER")
  
  else

    # get spoken number (mp3 version)
    SPEECHFILE=$(../numbers/getnumber "$TRACKNUMBER")

  fi

  # show speech number
  echo "#EXTINF:-1,$TRACKNUMBER"
  echo "$SPEECHFILE"

  # check buffer
  if [ -n "$EXTINFBUFFER" ]; then

    # show comment
    echo "$EXTINFBUFFER"

  fi

  # show filename
  echo "$FILENAME"

  # reset buffer
  EXTINFBUFFER=""

  # increase counter
  (( TRACKNUMBER += 1 ))

done < <(tr '\n' '\0' < "$PLAYLIST")

# signalize success
exit 0

