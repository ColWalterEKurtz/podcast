#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errexit   # exit immediately if a command exits with a non-zero status
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# terminal colors
readonly    NONE=$(tput sgr0)
readonly     RED=$(tput setaf 1)
readonly   GREEN=$(tput setaf 2)
readonly  YELLOW=$(tput setaf 3)
readonly    BLUE=$(tput setaf 4)
readonly MAGENTA=$(tput setaf 5)
readonly    CYAN=$(tput setaf 6)
readonly   WHITE=$(tput setaf 7)

# sox settings
readonly GAIN_HEADROOM="-1"
readonly CONTRAST_LEVEL="25"
readonly TARGET_RMSDB="-24"

# ------------------------------------------------------------------------------
# functions                                                            functions
# ------------------------------------------------------------------------------

# -------
# failmsg
# -------
#
# This function prints a red colored message via stderr.
#
function failmsg()
{
  # push to stderr
  echo -e "${RED}[FAIL]${NONE} $1" 1>&2
}

# -------
# warnmsg
# -------
#
# This function prints a yellow colored message via stderr.
#
function warnmsg()
{
  # push to stderr
  echo -e "${YELLOW}[WARN]${NONE} $1" 1>&2
}

# -------
# infomsg
# -------
#
# This function prints a blue colored message via stderr.
#
function infomsg()
{
  # push to stderr
  echo -e "${BLUE}[INFO]${NONE} $1" 1>&2
}

# -------
# donemsg
# -------
#
# This function prints a green colored message via stderr.
#
function donemsg()
{
  # push to stderr
  echo -e "${GREEN}[DONE]${NONE} $1" 1>&2
}

# -------------
# get_next_line
# -------------
#
# $1  filename
#
function get_next_line()
{
  sed --quiet           \
      --regexp-extended \
      --expression="

        # skip empty lines
        /^[[:space:]]*$/ b

        # skip comments
        /^[[:space:]]*#/ b

        # print line and exit
        p ; q

      " "$1"
}

# --------------
# hide_next_line
# --------------
#
# $1  filename
#
function hide_next_line()
{
  sed --in-place        \
      --regexp-extended \
      --expression="

          # create sharp character on hold buffer
          1 { h; s/.*/# / ; x }

          # skip comments
          /^[[:space:]]*#/ b

          # add sharp from hold buffer
          H ; s/.*// ; x

          # remove first NL character
          s/\x0A//

      " "$1"
}

# -------------
# get_rms_level
# -------------
#
# $1  filename
#
function get_rms_level()
{
  sox "$1" --null                \
      gain -n "$GAIN_HEADROOM"   \
      contrast "$CONTRAST_LEVEL" \
      stats                      \
      2>&1                       \
  | sed --quiet                  \
        --regexp-extended        \
        --expression="

          # add some extra characters for mono files
          s/.+/& @/

          # crop rms level dB
          s/^RMS lev dB[[:space:]]+([^[:space:]]+)[[:space:]].*/\1/p
        "
}

# -----------------
# calculate_n_value
# -----------------
#
# $1  RMS level dB at gain -n -1
#
function calculate_n_value()
{
  bc <<< "$GAIN_HEADROOM - ($1 - $TARGET_RMSDB)"
}

# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

# exactly one argument needed
if (( $# != 1 )) ; then

  # notify user
  failmsg "exactly one parameter needed: $(basename "$0") <playlist>"

  # signalize trouble
  exit 1

fi

# play each track from given playlist
while true
do

  # get next file from playlist
  MEDIAFILE=$(get_next_line "$1")

  # no more files
  [ -z "$MEDIAFILE" ] && break

  # check ectracted path
  if [ ! -f "$MEDIAFILE" ] ; then

    # notify user
    warnmsg "unable to locate file: \"$MEDIAFILE\""

    # mark line as comment
    hide_next_line "$1"

    # try next file
    continue

  fi

  # calculate gain value
  infomsg "calculating gain value..."
  RMS1=$(get_rms_level "$MEDIAFILE")
  GAIN=$(calculate_n_value "$RMS1")
  donemsg "using gain value $GAIN (from rms level $RMS1 dB)"

  # play single file at given rms level
  play "$MEDIAFILE"    \
       gain -n "$GAIN" \
       contrast "$CONTRAST_LEVEL"

  # comment out last played file
  infomsg "waiting 2 seconds before tagging line as comment..."
  sleep 2
  hide_next_line "$1"
  donemsg "line marked as comment"

  echo
  echo

done

# signalize success
exit 0

