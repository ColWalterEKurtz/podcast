#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# terminal colors
readonly    NONE=$(tput sgr0)
readonly     RED=$(tput setaf 1)
readonly   GREEN=$(tput setaf 2)
readonly  YELLOW=$(tput setaf 3)
readonly    BLUE=$(tput setaf 4)
readonly MAGENTA=$(tput setaf 5)
readonly    CYAN=$(tput setaf 6)
readonly   WHITE=$(tput setaf 7)

# filenames
readonly PLIST="last100.m3u"
readonly NLIST="last100num.m3u"

# ------------------------------------------------------------------------------
# functions                                                            functions
# ------------------------------------------------------------------------------

# -------
# failmsg
# -------
#
# This function prints a red colored message via stderr.
#
function failmsg()
{
  # push to stderr
  echo -e "${RED}[FAIL]${NONE} $1" 1>&2
}

# -------
# warnmsg
# -------
#
# This function prints a yellow colored message via stderr.
#
function warnmsg()
{
  # push to stderr
  echo -e "${YELLOW}[WARN]${NONE} $1" 1>&2
}

# -------
# infomsg
# -------
#
# This function prints a blue colored message via stderr.
#
function infomsg()
{
  # push to stderr
  echo -e "${BLUE}[INFO]${NONE} $1" 1>&2
}

# -------
# donemsg
# -------
#
# This function prints a green colored message via stderr.
#
function donemsg()
{
  # push to stderr
  echo -e "${GREEN}[DONE]${NONE} $1" 1>&2
}

# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

# call daily100 to create basic playlist
if ! ./daily100 "$@" > "$PLIST" ; then

  # stop here
  exit 1

fi

# show progress
donemsg "file created: $PLIST"

# insert numbers
./numins "$PLIST" > "$NLIST"

# show progress
donemsg "file created: $NLIST"

# check these mounting points
for USBSTICK in          \
  "/media/xi/4GB-FAT32"  \
  "/media/xi/16GB-FAT32" \
  ;
do

  # check if directory exists
  if [ -d "$USBSTICK" ]; then

    # set name of target directory
    TDIR=$(printf "%s/%s" "$USBSTICK" "$(date +"%Y-%m-%d")") 

    # notify user
    infomsg "device found: $USBSTICK"

    # remove target directory
    rm -rf "$TDIR"

    # create target directory
    mkdir --parents "$TDIR"

    # copy podcasts with numbers
    ./plcopy -b "Podcasts" "$NLIST" "$TDIR"

    # notify user
    donemsg "files copied to: $TDIR"

    # exit loop
    break

  fi

done

# signalize success
exit 0

