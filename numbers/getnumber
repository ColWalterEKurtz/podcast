#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# terminal colors
readonly    NONE=$(tput sgr0)
readonly     RED=$(tput setaf 1)
readonly   GREEN=$(tput setaf 2)
readonly  YELLOW=$(tput setaf 3)
readonly    BLUE=$(tput setaf 4)
readonly MAGENTA=$(tput setaf 5)
readonly    CYAN=$(tput setaf 6)
readonly   WHITE=$(tput setaf 7)

# set directories
readonly NUMDIR="$HOME/podcast/numbers/"
readonly SRCDIR="$HOME/podcast/numbers/src/"

# ------------------------------------------------------------------------------
# functions                                                            functions
# ------------------------------------------------------------------------------

# -------
# failmsg
# -------
#
# This function prints a red colored message via stderr.
#
function failmsg()
{
  # push to stderr
  echo -e "${RED}[FAIL]${NONE} $1" 1>&2
}

# -------
# warnmsg
# -------
#
# This function prints a yellow colored message via stderr.
#
function warnmsg()
{
  # push to stderr
  echo -e "${YELLOW}[WARN]${NONE} $1" 1>&2
}

# -------
# infomsg
# -------
#
# This function prints a blue colored message via stderr.
#
function infomsg()
{
  # push to stderr
  echo -e "${BLUE}[INFO]${NONE} $1" 1>&2
}

# -------
# donemsg
# -------
#
# This function prints a green colored message via stderr.
#
function donemsg()
{
  # push to stderr
  echo -e "${GREEN}[DONE]${NONE} $1" 1>&2
}

# -----------
# get_integer
# -----------
#
#
#
function get_integer()
{
  # let bc add zero
  sed -nre "s/^(-?)0*([[:digit:]]+)$/\1\2 + 0/p" <<< "$1" | bc 2>"/dev/null"
}

# -------
# wav2mp3
# -------
#
# $1  wav file
# $2  mp3 file
# $3  number
#
function wav2mp3()
{
  # create mp3 file
  lame --silent               \
       --strictly-enforce-ISO \
       --noreplaygain         \
       --cbr                  \
       -b "128"               \
       -h                     \
       -p                     \
       --id3v2-only           \
       --ta "Linguatec"       \
       --tl "Spoken Numbers"  \
       --ty "$(date "+%Y")"   \
       --tg "Other"           \
       --tn "$3"              \
       --tt "$3"              \
       "$1"                   \
       "$2"
}

# --------------
# create_silence
# --------------
#
# $1  filename
# $2  length (seconds)
#
function create_silence()
{
  sox -V0 \
      -n  \
      -b "24" -r "44100" -c "2" -e "signed-integer" "$1" \
      trim "0.000" "$2"
}

# ----------------------
# remove_leading_silence
# ----------------------
#
# $1  filename
#
function remove_leading_silence()
{
  # create temporary file
  local TMP=$(mktemp --suffix=".wav")
  
  # remove leading silence from wav file
  sox -V0 "$1" "$TMP" silence 1 0.1 -135d

  # overwrite input file
  mv "$TMP" "$1"
}

# -----------------------
# remove_trailing_silence
# -----------------------
#
# $1  filename
#
function remove_trailing_silence()
{
  # create temporary file
  local TMP=$(mktemp --suffix=".wav")
  
  # remove only trailing silence from wav file
  sox -V0 "$1" "$TMP" reverse silence 1 0.1 -135d reverse

  # overwrite input file
  mv "$TMP" "$1"
}

# -------------
# splice_append
# -------------
#
# $1  file to extend
# $2  file to append
#
function splice_append()
{
  # create temporary file
  local TMP=$(mktemp --suffix=".wav")

  # insert $2 at the end of $1
  sox -V0 "$1" "$2" "$TMP" splice "$(soxi -D "$1"),0.02,0.01"

  # overwrite input file
  mv "$TMP" "$1"
}

# -------------
# rig_up_number
# -------------
#
# $1  directory that holds the partial wav files
# $2  wav file to create
# $3  number
#
function rig_up_number()
{
  # name numbered arguments
  local WAVDIR="$1"
  local TARGET="$2"
  local FIGURE="$3"

  # get involved filenames
  if (( FIGURE == 0 )); then

    # set filenames
    local FILE_TH=""
    local FILE_HN=""
    local FILE_TO="0.wav"

  else

    # split number
    local FILE_TH=$(bc <<< "$FIGURE/1000"     | sed -nre "s/^[123456789]$/&000.wav/p")
    local FILE_HN=$(bc <<< "$FIGURE%1000/100" | sed -nre "s/^[123456789]$/&00.wav/p")
    local FILE_TO=$(bc <<< "$FIGURE%100"      | sed -nre "s/^[123456789][[:digit:]]?$/&.wav/p")

  fi

  # insert source directory
  local FILE_TH=$(sed -re "s|.+|$WAVDIR&|" <<< "$FILE_TH")
  local FILE_HN=$(sed -re "s|.+|$WAVDIR&|" <<< "$FILE_HN")
  local FILE_TO=$(sed -re "s|.+|$WAVDIR&|" <<< "$FILE_TO")

  # create temporary files
  local TEMPFILE_TH=$(mktemp --suffix=".wav")
  local TEMPFILE_HN=$(mktemp --suffix=".wav")
  local TEMPFILE_TO=$(mktemp --suffix=".wav")

  # no filename given
  if [ -z "$FILE_TH" ]; then

    # create silence
    create_silence "$TEMPFILE_TH" "0.080"

  else

    # duplicate file
    cp -f "$FILE_TH" "$TEMPFILE_TH"

    # more audio data to come
    if [ -n "$TEMPFILE_HN" ] || [ -n "$TEMPFILE_TO" ]; then

      # remove trailing silence from wav file
      remove_trailing_silence "$TEMPFILE_TH"

    fi

  fi

  # no filename given
  if [ -z "$FILE_HN" ]; then

    # create silence
    create_silence "$TEMPFILE_HN" "0.080"

  else

    # duplicate file
    cp -f "$FILE_HN" "$TEMPFILE_HN"

    # preceding wav file present
    if [ -n "$TEMPFILE_TH" ]; then

      # remove leading silence from wav file
      remove_leading_silence "$TEMPFILE_HN"

    fi

    # following wav file present
    if [ -n "$TEMPFILE_TO" ]; then

      # remove trailing silence from wav file
      remove_trailing_silence "$TEMPFILE_HN"

    fi

  fi

  # no filename given
  if [ -z "$FILE_TO" ]; then

    # create silence
    create_silence "$TEMPFILE_TO" "0.080"

  else

    # duplicate file
    cp -f "$FILE_TO" "$TEMPFILE_TO"

    # some audio data already present
    if [ -n "$TEMPFILE_TH" ] || [ -n "$TEMPFILE_HN" ]; then

      # remove leading silence from wav file
      remove_leading_silence "$TEMPFILE_TO"

    fi

  fi

  # combine files
  splice_append "$TEMPFILE_TH" "$TEMPFILE_HN"
  splice_append "$TEMPFILE_TH" "$TEMPFILE_TO"

  # remove expendable files
  rm "$TEMPFILE_HN"
  rm "$TEMPFILE_TO"

  # create (overwrite) target file
  mv "$TEMPFILE_TH" "$TARGET"
}

# ------------------------------------------------------------------------------
# options                                                                options
# ------------------------------------------------------------------------------

# set default values
OPMODE="MP3"

# set options to accept
readonly KNOWN_OPTIONS=":w"

# check passed options
while getopts "$KNOWN_OPTIONS" OPTION "$@"
do

  case "$OPTION" in

    # wav file only
    "w") OPMODE="WAV"
         ;;

    "?") failmsg "unknown option: -$OPTARG"
         exit 1
         ;;

    ":") failmsg "missing argument: -$OPTARG <argument>"
         exit 1
         ;;

  esac

done

# get number of positional parameters
PPNUM=$(( $# - OPTIND + 1 ))

# drop all parsed options
shift $(( OPTIND - 1 ))

# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

# check number of positional parameters
if (( PPNUM != 1 )) ; then

  # notify user
  failmsg "exactly one number needed to be passed in as argument"

  # signalize trouble
  exit 1

fi

# convert numeric argument
NUMBER=$(get_integer "$1")

# check number
if [ -z "$NUMBER" ] ; then

  # notify user
  failmsg "invalid number: \"$1\""

  # signalize trouble
  exit 1

fi

# check range
if (( NUMBER > 9999 )); then

  # notify user
  failmsg "number too large: $NUMBER"

  # signalize trouble
  exit 1

fi

# check range
if (( NUMBER < 0 )); then

  # notify user
  failmsg "number too small: $NUMBER"

  # signalize trouble
  exit 1

fi

# check requested operation
if [ "$OPMODE" == "MP3" ] ; then

  # mp3 file requested
  OUTFILE="$NUMDIR$NUMBER.mp3"

elif [ "$OPMODE" == "WAV" ] ; then

  # wav file requested
  OUTFILE="$NUMDIR$NUMBER.wav"

fi

# requested file already present
if [ -f "$OUTFILE" ] ; then

  # push path to stdout
  echo "$OUTFILE"

  # stop here
  exit 0

fi

# show progress
infomsg "creating number file: $OUTFILE"

# use direct path first
SRCFILE="$SRCDIR$NUMBER.wav"

# check if source file is missing
if [ ! -f "$SRCFILE" ] ; then

  # create temporary file
  TEMPFILE=$(mktemp --suffix=".wav")

  # clean up on exit
  trap 'rm -f "$TEMPFILE"' EXIT

  # try to rig up missing number
  rig_up_number "$SRCDIR" "$TEMPFILE" "$NUMBER"

  # check temporary wav file
  if [ ! -s "$TEMPFILE" ]; then

    # notify user
    failmsg "unable to create wav file"

    # signalize trouble
    exit 1

  fi

  # use temporary wav file as source
  SRCFILE="$TEMPFILE"

fi

# check requested operation
if [ "$OPMODE" == "MP3" ] ; then

  # create mp3 file
  wav2mp3 "$SRCFILE" "$OUTFILE" "$NUMBER"

elif [ "$OPMODE" == "WAV" ] ; then

  # just copy the given source file
  cp -f "$SRCFILE" "$OUTFILE"

fi

# check final output file
if [ ! -s "$OUTFILE" ] ; then

  # notify user
  failmsg "unable to create file: \"$OUTFILE\""

  # signalize trouble
  exit 1

fi

# push absolute path to stdout
readlink -e "$OUTFILE"

# signalize success
exit 0

