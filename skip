#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# terminal colors
readonly    NONE=$(tput sgr0)
readonly     RED=$(tput setaf 1)
readonly   GREEN=$(tput setaf 2)
readonly  YELLOW=$(tput setaf 3)
readonly    BLUE=$(tput setaf 4)
readonly MAGENTA=$(tput setaf 5)
readonly    CYAN=$(tput setaf 6)
readonly   WHITE=$(tput setaf 7)

# ------------------------------------------------------------------------------
# functions                                                            functions
# ------------------------------------------------------------------------------

# -------
# failmsg
# -------
#
# This function prints a red colored message via stderr.
#
function failmsg()
{
  # push to stderr
  echo -e "${RED}[FAIL]${NONE} $1" 1>&2
}

# -------
# warnmsg
# -------
#
# This function prints a yellow colored message via stderr.
#
function warnmsg()
{
  # push to stderr
  echo -e "${YELLOW}[WARN]${NONE} $1" 1>&2
}

# -------
# infomsg
# -------
#
# This function prints a blue colored message via stderr.
#
function infomsg()
{
  # push to stderr
  echo -e "${BLUE}[INFO]${NONE} $1" 1>&2
}

# -------
# donemsg
# -------
#
# This function prints a green colored message via stderr.
#
function donemsg()
{
  # push to stderr
  echo -e "${GREEN}[DONE]${NONE} $1" 1>&2
}

# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

# make skip work only for these files
CFGFILE="raw/kulturfragen_deutschlandfunk_2018_04_29_15_05_00_utc_diskussion_um_bodenreform_ein_anderes_verhaeltnis_zu_eigentumsrechten.cfg"
MP3FILE="raw/kulturfragen_deutschlandfunk_2018_04_29_15_05_00_utc_diskussion_um_bodenreform_ein_anderes_verhaeltnis_zu_eigentumsrechten.mp3"

# check cfg file
if [ ! -f "$CFGFILE" ] ; then

  # notify user
  failmsg "unable to locate file: \"$CFGFILE\""

  # signalize trouble
  exit 1

fi

# check mp3 file
if [ ! -f "$MP3FILE" ] ; then

  # notify user
  failmsg "unable to locate file: \"$MP3FILE\""

  # signalize trouble
  exit 1

fi

# show progress
infomsg "operating file: $CFGFILE"

# set name of the target directory
readonly SKIPDIR="skipped/"

# check if target directory is present
if [ ! -d "$SKIPDIR" ] ; then

  # try to create target directory
  mkdir -p "$SKIPDIR" 2>"/dev/null"

  # target directory is still missing
  if [ ! -d "$SKIPDIR" ] ; then

    # notify user
    failmsg "unable to create target directory: \"$SKIPDIR\""

    # signalize trouble
    exit 1

  fi

fi

# move files to skip directory
mv -f -t "$SKIPDIR" "$CFGFILE" "$MP3FILE"

# show progress
donemsg "file skipped: $MP3FILE"

# signalize success
exit 0
