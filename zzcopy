#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errexit   # exit immediately if a command exits with a non-zero status
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# terminal colors
readonly    NONE=$(tput sgr0)
readonly     RED=$(tput setaf 1)
readonly   GREEN=$(tput setaf 2)
readonly  YELLOW=$(tput setaf 3)
readonly    BLUE=$(tput setaf 4)
readonly MAGENTA=$(tput setaf 5)
readonly    CYAN=$(tput setaf 6)
readonly   WHITE=$(tput setaf 7)

# ------------------------------------------------------------------------------
# functions                                                            functions
# ------------------------------------------------------------------------------

# -------
# failmsg
# -------
#
# This function prints a red colored message via stderr.
#
function failmsg()
{
  # push to stderr
  echo -e "${RED}[FAIL]${NONE} $1" 1>&2
}

# -------
# warnmsg
# -------
#
# This function prints a yellow colored message via stderr.
#
function warnmsg()
{
  # push to stderr
  echo -e "${YELLOW}[WARN]${NONE} $1" 1>&2
}

# -------
# infomsg
# -------
#
# This function prints a blue colored message via stderr.
#
function infomsg()
{
  # push to stderr
  echo -e "${BLUE}[INFO]${NONE} $1" 1>&2
}

# -------
# donemsg
# -------
#
# This function prints a green colored message via stderr.
#
function donemsg()
{
  # push to stderr
  echo -e "${GREEN}[DONE]${NONE} $1" 1>&2
}

# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

# check number of positional parameters
if (( $# != 1 )) ; then

  # notify user
  failmsg "exactly one positional parameter needed: $(basename "$0") <target dir>"

  # signalize trouble
  exit 1

fi

# -h or --help
if [ "$1" == "-h" ] || [ "$1" == "--help" ] ; then

  # notify user
  failmsg "exactly one positional parameter needed: $(basename "$0") <target dir>"

  # signalize trouble
  exit 1

fi

# set timestamp of entire copy operation once
COPYDATE=$(date "+%F %T %z")

# set directory names
SOURCEDIR="$HOME/podcast/audio/ZeitZeichen/"
TARGETDIR=$(sed -re "s|.+|&/| ; s|//$|/|" <<< "$1")

# show related directories
infomsg "source: $SOURCEDIR"
infomsg "target: $TARGETDIR"

# check if source directory is missing
if [ ! -d "$SOURCEDIR" ] ; then

  # notify user
  failmsg "unable to locate directory: \"$SOURCEDIR\""

  # signalize trouble
  exit 1

fi

# check if target directory is missing
if [ ! -d "$TARGETDIR" ] ; then

  # try to create target directory
  mkdir --parents "$TARGETDIR" &>"/dev/null"

  # check if target directory is still missing
  if [ ! -d "$TARGETDIR" ] ; then

    # notify user
    failmsg "unable to create directory: \"$TARGETDIR\""

    # signalize trouble
    exit 1

  fi

  # set same modification time
  touch -d "$COPYDATE" "$TARGETDIR"

fi

# check write permission
if [ ! -w "$TARGETDIR" ] ; then

  # notify user
  failmsg "no write permission: \"$TARGETDIR\""

  # signalize trouble
  exit 1

fi

# find files unique to TARGETDIR
comm -z13                                \
      <(find "$SOURCEDIR"                \
             -type      "f"              \
             -regextype "posix-extended" \
             -regex     ".+\.[Mm][Pp]3$" \
             -printf    "%P\0"           \
        | sort -zu)                      \
      <(find "$TARGETDIR"                \
             -type      "f"              \
             -regextype "posix-extended" \
             -regex     ".+\.[Mm][Pp]3$" \
             -printf    "%P\0"           \
        | sort -zu)                      \
| while read -rd $'\0' FILENAME
do

  # set full path name
  DST="$TARGETDIR$FILENAME"

  # show progress
  infomsg "- $(sed -re "s/^(.{68})....+/\1.../" <<< "$DST")"

  # remove obsolete file
  rm -f "$DST"

done

# copy missing and newer files
find "$SOURCEDIR"                \
     -type      "f"              \
     -regextype "posix-extended" \
     -regex     ".+\.[Mm][Pp]3$" \
     -printf    "%P\0"           \
| sort -z                        \
| while read -rd $'\0' FILENAME
do

  # set full path names
  SRC="$SOURCEDIR$FILENAME"
  DST="$TARGETDIR$FILENAME"
  DIR="$(dirname "$DST")"

  # check if directoty is missing
  if [ ! -d "$DIR" ] ; then

    # create directory if missing
    mkdir --parents "$DIR"

    # check if directoty is still missing
    if [ ! -d "$DIR" ] ; then

      # notify user
      failmsg "unable to create directory: \"$DIR\""

      # signalize trouble
      exit 1

    fi

    # set same modification time
    touch -d "$COPYDATE" "$DIR"

  fi

  # copy only newer (and missing) files
  if [ "$SRC" -nt "$DST" ] || [ ! -f "$DST" ] ; then

    # copy mp3 - file
    cp "$SRC" "$DST"

    # set same modification time
    touch -d "$COPYDATE" "$DST"

    # show progress
    infomsg "+ $(sed -re "s/^(.{68})....+/\1.../" <<< "$DST")"

  fi

done

# count number of source files
NSRCFILES=$(find "$SOURCEDIR"                \
                 -type      "f"              \
                 -regextype "posix-extended" \
                 -regex     ".+\.[Mm][Pp]3$" \
                 -printf    "."              \
            | wc -c)
 
# count number of target files
NDSTFILES=$(find "$TARGETDIR"                \
                 -type      "f"              \
                 -regextype "posix-extended" \
                 -regex     ".+\.[Mm][Pp]3$" \
                 -printf    "."              \
            | wc -c)

# show number of files
donemsg "source files: $NSRCFILES"
donemsg "target files: $NDSTFILES"

# signalize success
exit 0

