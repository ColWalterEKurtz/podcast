#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# terminal colors
readonly    NONE=$(tput sgr0)
readonly     RED=$(tput setaf 1)
readonly   GREEN=$(tput setaf 2)
readonly  YELLOW=$(tput setaf 3)
readonly    BLUE=$(tput setaf 4)
readonly MAGENTA=$(tput setaf 5)
readonly    CYAN=$(tput setaf 6)
readonly   WHITE=$(tput setaf 7)

# the podcast directory
readonly PODCASTDIR="$HOME/podcast/"

# pull files will be created in this directory
readonly PULLDIR="${PODCASTDIR}pull/"

# the list of pull files that already have been created
readonly DBFILE="${PODCASTDIR}pulldb"

# ------------------------------------------------------------------------------
# functions                                                            functions
# ------------------------------------------------------------------------------

# -------
# failmsg
# -------
#
# This function prints a red colored message via stderr.
#
function failmsg()
{
  # push to stderr
  echo -e "${RED}[FAIL]${NONE} $1" 1>&2
}
# -------
# warnmsg
# -------
#
# This function prints a yellow colored message via stderr.
#
function warnmsg()
{
  # push to stderr
  echo -e "${YELLOW}[WARN]${NONE} $1" 1>&2
}

# -------
# infomsg
# -------
#
# This function prints a blue colored message via stderr.
#
function infomsg()
{
  # push to stderr
  echo -e "${BLUE}[INFO]${NONE} $1" 1>&2
}

# -------
# donemsg
# -------
#
# This function prints a green colored message via stderr.
#
function donemsg()
{
  # push to stderr
  echo -e "${GREEN}[DONE]${NONE} $1" 1>&2
}

# ----------
# utf82ascii
# ----------
#
# ... | utf82ascii | ...
#
function utf82ascii()
{
  sed --regexp-extended \
      --expression="

        # escape all colons
        s/:/:c/g

        # escape all native question marks (iconv may introduce much more)
        s/\\?/:q/g

        # collection of characters that aren't translated (suitable) by iconv
        s/¦/|/g
        s/¡/!/g
        s/¿/:q/g
        s/„/\"/g
        s/«/\"/g
        s/»/\"/g
        s/÷/\//g
        s/±/+-/g
        s/¹/^1/g
        s/²/^2/g
        s/³/^3/g
        s/Ä/Ae/g
        s/ä/ae/g
        s/Ö/Oe/g
        s/ö/oe/g
        s/Ü/Ue/g
        s/ü/ue/g
        s/Ø/Oe/g
        s/ø/oe/g
        s/Ð/Dh/g
        s/ð/dh/g
        s/Þ/Th/g
        s/þ/th/g

      "                                       \
  | iconv --from-code "UTF-8"                 \
          --to-code "ASCII//TRANSLIT//IGNORE" \
  | sed --regexp-extended                     \
        --expression="

          # remove all question marks introduced by iconv
          s/\\?//g

          # restore all escaped question marks
          s/:q/?/g

          # restore all escaped colons
          s/:c/:/g

        "
}

# --------
# simplify
# --------
#
# ... | simplify | ...
#
function simplify()
{
  sed --regexp-extended \
      --expression="

        # replace everything but letters and numbers
        s/[^[:alnum:]]+/_/g

        # lower case
        s/.+/\L&/

        # trim both ends
        s/^_//
        s/_$//

      "
}

# --------
# quotable
# --------
#
# ... | quotable | ...
#
function quotable()
{
  sed --regexp-extended \
      --expression="

        # escape backslashes
        s/\\\\/\\\\\\\\/g

        # escape dollar signs
        s/\\$/\\\\$/g

        # escape double quotes
        s/\"/\\\\\"/g

      "
}

# ---------------
# sec_to_midnight
# ---------------
#
# $1  date
#
function sec_to_midnight()
{
  # split '... hh:mm:ss ...'
  local HOR=$(sed -nre "s/.*[^[:digit:]]0*([[:digit:]]+):0*([[:digit:]]+):0*([[:digit:]]+).*/\1/p" <<< "$1")
  local MIN=$(sed -nre "s/.*[^[:digit:]]0*([[:digit:]]+):0*([[:digit:]]+):0*([[:digit:]]+).*/\2/p" <<< "$1")
  local SEC=$(sed -nre "s/.*[^[:digit:]]0*([[:digit:]]+):0*([[:digit:]]+):0*([[:digit:]]+).*/\3/p" <<< "$1")

  # push seconds to stdout
  bc <<< "86400 - ($HOR * 3600 + $MIN * 60 + $SEC)" | xargs printf "%05d\n"
}

# --------------
# get_month_name
# --------------
#
# returns the name of the passed month
#
function get_month_name()
{
  case "$1" in
  "1")  echo "Januar"    ;;
  "2")  echo "Februar"   ;;
  "3")  echo "Maerz"     ;;
  "4")  echo "April"     ;;
  "5")  echo "Mai"       ;;
  "6")  echo "Juni"      ;;
  "7")  echo "Juli"      ;;
  "8")  echo "August"    ;;
  "9")  echo "September" ;;
  "10") echo "Oktober"   ;;
  "11") echo "November"  ;;
  "12") echo "Dezember"  ;;
  *)    echo ""          ;;
  esac
}

# --------------
# get_feed_title
# --------------
#
# ... | get_feed_title | ...
#
function get_feed_title()
{
  sed --quiet           \
      --regexp-extended \
      --expression="

        # crop feed title
        s/^FEED_TITLE=(.+)/\1/p

        # quit after first substitution
        T ; q

      "
}

# -----------
# unify_title
# -----------
#
# ... | unify_title | ...
#
function unify_title()
{
  sed --regexp-extended \
      --expression="

        # replace all double quotes by single quotes
        s/\"/'/g

        # trim line
        s/[[:space:]]+/ /g
        s/^ //
        s/ $//

      " \
  | utf82ascii
}

# ----------
# unify_date
# ----------
#
# ... | unify_date | ...
#
function unify_date()
{
  xargs -L1 -I'{}' date -ud '{}' "+%Y-%m-%d %H:%M:%S %Z" 2>"/dev/null" | utf82ascii
}

# --------------
# unify_duration
# --------------
#
# ... | unify_duration | ...
#
function unify_duration()
{
  sed --quiet           \
      --regexp-extended \
      --expression="

        # HH:MM:SS
        s/^[[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}$/&/p ; t

        # MM:SS
        s/^[[:digit:]]{2}:[[:digit:]]{2}$/00:&/p ; t

        # SS
        s/^[[:digit:]]{2}$/00:00:&/p ; t

      " \
  | utf82ascii
}

# ------------
# unify_author
# ------------
#
# ... | unify_author | ...
#
function unify_author()
{
  sed --regexp-extended \
      --expression="

        # replace each 'und' with a real separator
        s/ und / ; /g

        # replace each slash with a real separator
        s|/|;|g

        # split line at each semicolon
        s/;/\x0A/g

      "                   \
  | sed --regexp-extended \
        --expression="

          # operate lines without comma
          /,/! {

            # swap first and last name
            s/^ *(.+[^ ]) +([^ ]+) *$/\2, \1/

          }

        "                 \
  | sed --quiet           \
        --regexp-extended \
        --expression="

          # append pattern to hold space
          H

          # last line
          $ {

            # copy hold to pattern space
            g

            # concatenate all lines
            s/\x0A/; /g

            # let each separator be followed by space
            s/ *([,;]) */\1 /g

            # trim both ends
            s/^[; ]+//
            s/[; ]+$//

            # print one single line
            p
          }

        " \
  | utf82ascii
}

# -----------------
# unify_description
# -----------------
#
# ... | unify_description | ...
#
function unify_description()
{
  sed --regexp-extended \
      --expression="

        # replace all double quotes by single quotes
        s/\"/'/g

        # trim line
        s/[[:space:]]+/ /g
        s/^ //
        s/ $//

      " \
  | utf82ascii
}

# --------------------
# get_foreground_image
# --------------------
#
# $1  UTC date
#
function get_foreground_image()
{
  # source directory for all date files
  local readonly IMAGEDIR="${PODCASTDIR}images/months/"

  # get year and month from date
  local UTCY=$(sed -nre "s/^([[:digit:]]+)-0*([[:digit:]]+)-.+/\1/p" <<< "$1")
  local UTCM=$(sed -nre "s/^([[:digit:]]+)-0*([[:digit:]]+)-.+/\2/p" <<< "$1")

  # set expected filename
  local FILENAME=$(printf "%s%d-%02d.png" "$IMAGEDIR" "$UTCY" "$UTCM")

  # push filename to stdout
  echo "$FILENAME"

  # signalize success
  return 0
}

# ---------
# get_album
# ---------
#
# $1  UTC date
#
function get_album()
{
  # get year and month from date
  local UTCY=$(sed -nre "s/^([[:digit:]]+)-0*([[:digit:]]+)-.+/\1/p" <<< "$1")
  local UTCM=$(sed -nre "s/^([[:digit:]]+)-0*([[:digit:]]+)-.+/\2/p" <<< "$1")

  # get name from number
  local NAME=$(get_month_name "$UTCM")

  # push album to stdout
  printf "%04d-%02d:%s\n" "$UTCY" "$UTCM" "$NAME"

  # signalize success
  return 0
}

# --------
# get_year
# --------
#
# $1  UTC date
#
function get_year()
{
  # get year from date
  local UTCY=$(sed -nre "s/^([[:digit:]]+)-0*([[:digit:]]+)-.+/\1/p" <<< "$1")

  # push year to stdout
  printf "%04d\n" "$UTCY"

  # signalize success
  return 0
}

# ------------
# get_sort_key
# ------------
#
# $1  podcast feed
# $2  episode date
#
function get_sort_key()
{
  local YYYYMMDD=$(date -d "$2" +"%Y-%m-%d")
  local SEC2MIDN=$(sec_to_midnight "$2")

  # push key to stdout
  simplify <<< "$YYYYMMDD $1 $SEC2MIDN"
}

# --------------
# show_pull_file
# --------------
#
# this function uses following global variables:
#   PULL_WEB_SRC
#   PULL_OUT_DIR
#   PULL_OUT_MP3
#   PULL_OUT_CFG
#   PULL_DUR_MIN
#   PULL_DUR_MAX
#   PULL_DUR_CHK
#   CFG_BACKGROUND
#   CFG_FOREGROUND
#   CFG_COMPRESSION
#   CFG_TOPDIR
#   CFG_GENRE
#   CFG_ARTIST
#   CFG_ALBUM
#   CFG_YEAR
#   CFG_TITLE
#   CFG_AUTHOR
#   CFG_COMMENT
#   CFG_AIRTIME
#   CFG_SORTKEY
#
function show_pull_file()
{
  echo "#!/bin/bash"
  echo
  echo "# ------------------------------------------------------------------------------"
  echo "# settings                                                              settings"
  echo "# ------------------------------------------------------------------------------"
  echo "set -o errtrace  # any trap on ERR is inherited by shell functions,"
  echo "                 #   command substitutions, and commands executed in a subshell"
  echo "                 #   environment"
  echo "set -o nounset   # treat unset variables and parameters other than the special"
  echo "                 #   parameters \"@\" and \"*\" as an error when performing"
  echo "                 #   parameter expansion"
  echo "set -o pipefail  # the return value of a pipeline is the value of the last"
  echo "                 #   (rightmost) command to exit with a non-zero status, or"
  echo "                 #   zero if all commands in the pipeline exit successfully"
  echo
  echo "# set language"
  echo "export LANG=\"en_US.UTF-8\""
  echo
  echo "# use dot as decimal separator"
  echo "export LC_NUMERIC=\"en_US.UTF-8\""
  echo
  echo "# terminal colors"
  echo "readonly    NONE=\$(tput sgr0)"
  echo "readonly     RED=\$(tput setaf 1)"
  echo "readonly   GREEN=\$(tput setaf 2)"
  echo "readonly  YELLOW=\$(tput setaf 3)"
  echo "readonly    BLUE=\$(tput setaf 4)"
  echo "readonly MAGENTA=\$(tput setaf 5)"
  echo "readonly    CYAN=\$(tput setaf 6)"
  echo "readonly   WHITE=\$(tput setaf 7)"
  echo
  echo "# pull information"
  echo "readonly WEB_SRC=\"$(quotable <<< $PULL_WEB_SRC)\""
  echo "readonly OUT_DIR=\"$(quotable <<< $PULL_OUT_DIR)\""
  echo "readonly OUT_MP3=\"$(quotable <<< $PULL_OUT_MP3)\""
  echo "readonly OUT_CFG=\"$(quotable <<< $PULL_OUT_CFG)\""
  echo "readonly DUR_MIN=\"$(quotable <<< $PULL_DUR_MIN)\""
  echo "readonly DUR_MAX=\"$(quotable <<< $PULL_DUR_MAX)\""
  echo "readonly DUR_CHK=\"$(quotable <<< $PULL_DUR_CHK)\""
  echo
  echo "# cfg information"
  echo "readonly CFG_BACKGROUND=\"$(quotable <<< $CFG_BACKGROUND)\""
  echo "readonly CFG_FOREGROUND=\"$(quotable <<< $CFG_FOREGROUND)\""
  echo "readonly CFG_COMPRESSION=\"$(quotable <<< $CFG_COMPRESSION)\""
  echo "readonly CFG_TOPDIR=\"$(quotable <<< $CFG_TOPDIR)\""
  echo "readonly CFG_GENRE=\"$(quotable <<< $CFG_GENRE)\""
  echo "readonly CFG_ARTIST=\"$(quotable <<< $CFG_ARTIST)\""
  echo "readonly CFG_ALBUM=\"$(quotable <<< $CFG_ALBUM)\""
  echo "readonly CFG_YEAR=\"$(quotable <<< $CFG_YEAR)\""
  echo "readonly CFG_TITLE=\"$(quotable <<< $CFG_TITLE)\""
  echo "readonly CFG_AUTHOR=\"$(quotable <<< $CFG_AUTHOR)\""
  echo "readonly CFG_COMMENT=\"$(quotable <<< $CFG_COMMENT)\""
  echo "readonly CFG_AIRTIME=\"$(quotable <<< $CFG_AIRTIME)\""
  echo "readonly CFG_SORTKEY=\"$(quotable <<< $CFG_SORTKEY)\""
  echo
  echo "# ------------------------------------------------------------------------------"
  echo "# functions                                                            functions"
  echo "# ------------------------------------------------------------------------------"
  echo
  echo "# -------"
  echo "# failmsg"
  echo "# -------"
  echo "#"
  echo "# This function prints a red colored message via stderr."
  echo "#"
  echo "function failmsg()"
  echo "{"
  echo "  # push to stderr"
  echo "  echo -e \"\${RED}[FAIL]\${NONE} \$1\" 1>&2"
  echo "}"
  echo
  echo "# -------"
  echo "# warnmsg"
  echo "# -------"
  echo "#"
  echo "# This function prints a yellow colored message via stderr."
  echo "#"
  echo "function warnmsg()"
  echo "{"
  echo "  # push to stderr"
  echo "  echo -e \"\${YELLOW}[WARN]\${NONE} \$1\" 1>&2"
  echo "}"
  echo
  echo "# -------"
  echo "# infomsg"
  echo "# -------"
  echo "#"
  echo "# This function prints a blue colored message via stderr."
  echo "#"
  echo "function infomsg()"
  echo "{"
  echo "  # push to stderr"
  echo "  echo -e \"\${BLUE}[INFO]\${NONE} \$1\" 1>&2"
  echo "}"
  echo
  echo "# -------"
  echo "# donemsg"
  echo "# -------"
  echo "#"
  echo "# This function prints a green colored message via stderr."
  echo "#"
  echo "function donemsg()"
  echo "{"
  echo "  # push to stderr"
  echo "  echo -e \"\${GREEN}[DONE]\${NONE} \$1\" 1>&2"
  echo "}"
  echo
  echo "# ----------"
  echo "# utf82ascii"
  echo "# ----------"
  echo "#"
  echo "# ... | utf82ascii | ..."
  echo "#"
  echo "function utf82ascii()"
  echo "{"
  echo "  sed --regexp-extended \\"
  echo "      --expression=\""
  echo
  echo "        # escape all colons"
  echo "        s/:/:c/g"
  echo
  echo "        # escape all native question marks (iconv may introduce much more)"
  echo "        s/\\\\?/:q/g"
  echo
  echo "        # collection of characters that aren't translated (suitable) by iconv"
  echo "        s/¦/|/g"
  echo "        s/¡/!/g"
  echo "        s/¿/:q/g"
  echo "        s/„/\\\"/g"
  echo "        s/«/\\\"/g"
  echo "        s/»/\\\"/g"
  echo "        s/÷/\\//g"
  echo "        s/±/+-/g"
  echo "        s/¹/^1/g"
  echo "        s/²/^2/g"
  echo "        s/³/^3/g"
  echo "        s/Ä/Ae/g"
  echo "        s/ä/ae/g"
  echo "        s/Ö/Oe/g"
  echo "        s/ö/oe/g"
  echo "        s/Ü/Ue/g"
  echo "        s/ü/ue/g"
  echo "        s/Ø/Oe/g"
  echo "        s/ø/oe/g"
  echo "        s/Ð/Dh/g"
  echo "        s/ð/dh/g"
  echo "        s/Þ/Th/g"
  echo "        s/þ/th/g"
  echo
  echo "      \"                                       \\"
  echo "  | iconv --from-code \"UTF-8\"                 \\"
  echo "          --to-code \"ASCII//TRANSLIT//IGNORE\" \\"
  echo "  | sed --regexp-extended                     \\"
  echo "        --expression=\""
  echo
  echo "          # remove all question marks introduced by iconv"
  echo "          s/\\\\?//g"
  echo
  echo "          # restore all escaped question marks"
  echo "          s/:q/?/g"
  echo
  echo "          # restore all escaped colons"
  echo "          s/:c/:/g"
  echo
  echo "        \""
  echo "}"
  echo
  echo "# --------------"
  echo "# download_media"
  echo "# --------------"
  echo "#"
  echo "# \$1  download url"
  echo "# \$2  output filename"
  echo "#"
  echo "function download_media()"
  echo "{"
  echo "  # get base name"
  echo "  local readonly BNAME=\$(basename \"\$1\")"
  echo
  echo "  # show progress"
  echo "  infomsg \"downloading media: \$BNAME\""
  echo
  echo "  # download media"
  echo "  wget --no-verbose    \\"
  echo "       --show-progress \\"
  echo "       --continue      \\"
  echo "       --user-agent=\"\" \\"
  echo "       --timeout=\"60\"  \\"
  echo "       -O \"\$2\"         \\"
  echo "       \"\$1\"            \\"
  echo "       2>&1"
  echo
  echo "  # check exit status"
  echo "  if (( \$? != 0 )) ; then"
  echo
  echo "    # notify user"
  echo "    failmsg \"download not finished: \$BNAME\""
  echo
  echo "    # signalize trouble"
  echo "    return 1"
  echo
  echo "  fi"
  echo
  echo "  # show progress"
  echo "  donemsg \"media downloaded: \$2\""
  echo
  echo "  # signalize success"
  echo "  return 0"
  echo "}"
  echo
  echo "# ---------"
  echo "# exit_code"
  echo "# ---------"
  echo "#"
  echo "#"
  echo "#"
  echo "function exit_code()"
  echo "{"
  echo "  # split path"
  echo "  local DNAME=\$(dirname \"\$0\" | sed -re \"s|.+|&/| ; s|//\$|/|\")"
  echo "  local BNAME=\$(basename \"\$0\")"
  echo
  echo "  # set final filename"
  echo "  local BFINAL=\$(sed -nre \"s|(.+)\\.([^\\.]+)\$|\\1.\$GLOBAL_FINALTAG|p\" <<< \"\$BNAME\")"
  echo "  local PFINAL=\"\$DNAME\$BFINAL\""
  echo
  echo "  # rename this file"
  echo "  mv --force \"\$0\" \"\$PFINAL\" &>\"/dev/null\""
  echo "}"
  echo
  echo "# ------------------------------------------------------------------------------"
  echo "# options                                                                options"
  echo "# ------------------------------------------------------------------------------"
  echo
  echo "# set default values"
  echo "FORCE=\"0\""
  echo
  echo "# set options to accept"
  echo "readonly KNOWN_OPTIONS=\":f\""
  echo
  echo "# check passed options"
  echo "while getopts \"\$KNOWN_OPTIONS\" OPTION \"\$@\""
  echo "do"
  echo
  echo "  case \"\$OPTION\" in"
  echo
  echo "    # show help"
  echo "    \"f\") FORCE=\"1\""
  echo "         ;;"
  echo
  echo "    \"?\") failmsg \"unknown option: -\$OPTARG\""
  echo "         exit 1"
  echo "         ;;"
  echo
  echo "    \":\") failmsg \"missing argument: -\$OPTARG <argument>\""
  echo "         exit 1"
  echo "         ;;"
  echo
  echo "  esac"
  echo
  echo "done"
  echo
  echo "# get number of positional parameters"
  echo "PPNUM=\$(( \$# - OPTIND + 1 ))"
  echo
  echo "# drop all parsed options"
  echo "shift \$(( OPTIND - 1 ))"
  echo
  echo "# ------------------------------------------------------------------------------"
  echo "# commands                                                              commands"
  echo "# ------------------------------------------------------------------------------"
  echo
  echo "# check number of positional parameters"
  echo "if (( PPNUM != 0 )) ; then"
  echo
  echo "  # notify user"
  echo "  failmsg \"no positional parameters allowed\""
  echo
  echo "  # signalize trouble"
  echo "  exit 1"
  echo
  echo "fi"
  echo
  echo "# initialize the final tag for this file"
  echo "GLOBAL_FINALTAG=\"pull\""
  echo
  echo "# clean up on exit"
  echo "trap 'exit_code' EXIT"
  echo
  echo "# check target directory"
  echo "if [ ! -d \"\$OUT_DIR\" ] ; then"
  echo
  echo "  # try to create target directory"
  echo "  mkdir -p \"\$OUT_DIR\" 2>\"/dev/null\""
  echo
  echo "  # target directory still missing"
  echo "  if [ ! -d \"\$OUT_DIR\" ] ; then"
  echo
  echo "    # notify user"
  echo "    failmsg \"unable to create target directory: \\\"\$OUT_DIR\\\"\""
  echo
  echo "    # signalize trouble"
  echo "    exit 1"
  echo
  echo "  fi"
  echo
  echo "fi"
  echo
  echo "# check flag"
  echo "if [ \"\$FORCE\" == \"0\" ] ; then"
  echo
  echo "  # check left threshold"
  echo "  if [ \"\$DUR_CHK\" \\< \"\$DUR_MIN\" ] ; then"
  echo
  echo "    # notify user"
  echo "    warnmsg \"\$0 is shorter than expected: \$DUR_CHK (use -f to download anyway)\""
  echo
  echo "    # signalize trouble"
  echo "    exit 1"
  echo
  echo "  fi"
  echo
  echo "  # check right threshold"
  echo "  if [ \"\$DUR_CHK\" \\> \"\$DUR_MAX\" ] ; then"
  echo
  echo "    # notify user"
  echo "    warnmsg \"\$0 is longer than expected: \$DUR_CHK (use -f to download anyway)\""
  echo
  echo "    # signalize trouble"
  echo "    exit 1"
  echo
  echo "  fi"
  echo
  echo "fi"
  echo
  echo "# try to download media file"
  echo "if ! download_media \"\$WEB_SRC\" \"\$OUT_DIR\$OUT_MP3\" ; then"
  echo
  echo "  # signalize trouble"
  echo "  exit 1"
  echo
  echo "fi"
  echo
  echo "# create related cfg file"
  echo "{"
  echo
  echo "  echo \"GENRE=\$CFG_GENRE\""
  echo "  echo \"ARTIST=\$CFG_ARTIST\""
  echo "  echo \"ALBUM=\$CFG_ALBUM\""
  echo "  echo \"YEAR=\$CFG_YEAR\""
  echo "  echo"
  echo "  echo \"TITLE=\$CFG_TITLE\""
  echo "  echo"
  echo "  echo \"AUTHOR=\$CFG_AUTHOR\""
  echo "  echo \"COMMENT=\$CFG_COMMENT\""
  echo "  echo \"AIRTIME=\$CFG_AIRTIME\""
  echo "  echo \"SORTKEY=\$CFG_SORTKEY\""
  echo "  echo \"WEBSOURCE=\$WEB_SRC\""
  echo "  echo"
  echo "  echo \"BACKGROUND=\$CFG_BACKGROUND\""
  echo "  echo \"FOREGROUND=\$CFG_FOREGROUND\""
  echo "  echo \"COMPRESSION=\$CFG_COMPRESSION\""
  echo "  echo \"TOPDIR=\$CFG_TOPDIR\""
  echo "  echo"
  echo
  echo "  # add ID3 tags"
  echo "  eyeD3 --verbose          \\"
  echo "        --no-color         \\"
  echo "        \"\$OUT_DIR\$OUT_MP3\" \\"
  echo "        2>\"/dev/null\"      \\"
  echo "  | utf82ascii             \\"
  echo "  | sed -re \"s/.+/# &/\""
  echo
  echo "} > \"\$OUT_DIR\$OUT_CFG\""
  echo
  echo "# update the final tag for this file"
  echo "GLOBAL_FINALTAG=\"done\""
  echo
  echo "# signalize success"
  echo "exit 0"
}

# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

# check number of parameters
if (( $# != 2 )) ; then

  # notify user
  failmsg "exactly two arguments needed: $(basename "$0") <item file> <feed file>"

  # signalize trouble
  exit 1

fi

# set item filename
readonly ITEM_FILE="$1"

# check file
if [ ! -f "$ITEM_FILE" ] ; then

  # notify user
  failmsg "unable to locate file: \"$ITEM_FILE\""

  # signalize trouble
  exit 1

fi

# set feed filename
readonly FEED_FILE="$2"

# check file
if [ ! -f "$FEED_FILE" ] ; then

  # notify user
  failmsg "unable to locate file: \"$FEED_FILE\""

  # signalize trouble
  exit 1

fi

# check target directory
if [ ! -d "$PULLDIR" ] ; then

  # try to create target directory
  mkdir -p "$PULLDIR" 2>"/dev/null"

  # target directory still missing
  if [ ! -d "$PULLDIR" ] ; then

    # notify user
    failmsg "unable to create target directory: \"$PULLDIR\""

    # signalize trouble
    exit 1

  fi

fi

# assert db file is present
touch "$DBFILE"

# check db file
if [ ! -f "$DBFILE" ] ; then

  # notify user
  failmsg "unable to locate db file: \"$DBFILE\""

  # signalize trouble
  exit 1

fi

# get feed title once and convert text to ASCII
readonly FEED_TITLE=$(get_feed_title < "$ITEM_FILE" | utf82ascii)

# check title
if [ -z "$FEED_TITLE" ] ; then

  # notify user
  failmsg "unable to extract feed name: \"$ITEM_FILE\""

  # signalize trouble
  exit 1

fi

# number of episodes that have been downloaded already
OLDCOUNT=0

# read all items from feed file
while read -r LINE
do

  # item finished (skating on thin ice)
  if [ "$LINE" == "ITEM=END" ] ; then

    # check data
    [ -z "$MEDIA"       ] && { failmsg "no MEDIA found in item"         ; exit 1 ; }
    [ -z "$TITLE"       ] && { failmsg "no TITLE found in $MEDIA"       ; exit 1 ; }
    [ -z "$DATE"        ] && { failmsg "no DATE found in $MEDIA"        ; exit 1 ; }
    [ -z "$DURATION"    ] && { failmsg "no DURATION found in $MEDIA"    ; exit 1 ; }
    [ -z "$AUTHOR"      ] && { warnmsg "no AUTHOR found in $MEDIA"      ;          }
    [ -z "$DESCRIPTION" ] && { warnmsg "no DESCRIPTION found in $MEDIA" ;          }

    # unify data
          TITLE=$(unify_title       <<< "$TITLE"      )
           DATE=$(unify_date        <<< "$DATE"       )
       DURATION=$(unify_duration    <<< "$DURATION"   )
         AUTHOR=$(unify_author      <<< "$AUTHOR"     )
    DESCRIPTION=$(unify_description <<< "$DESCRIPTION")

    # check data
    [ -z "$TITLE"       ] && { failmsg "unable to unify TITLE in $MEDIA"       ; exit 1 ; }
    [ -z "$DATE"        ] && { failmsg "unable to unify DATE in $MEDIA"        ; exit 1 ; }
    [ -z "$DURATION"    ] && { failmsg "unable to unify DURATION in $MEDIA"    ; exit 1 ; }
    [ -z "$AUTHOR"      ] && { warnmsg "unable to unify AUTHOR in $MEDIA"      ;          }
    [ -z "$DESCRIPTION" ] && { warnmsg "unable to unify DESCRIPTION in $MEDIA" ;          }

    # get hash value of this url
    MEDIAHASH=$(sha1sum <<< "$MEDIA" | sed -re "s/ .+//")

    # set database entry (end with MEDIAHASH)
    DBENTRY="$DATE $FEED_TITLE $TITLE @ $MEDIAHASH"

    # set core of each filename
    PULLCORE=$(simplify <<< "$DATE $FEED_TITLE $MEDIAHASH")

    # set filename of the resulting pull file
    PULLFILE="$PULLCORE.pull"

    # check if pull file has already been created
    if LC_ALL=C grep -q "$MEDIAHASH$" "$DBFILE" ; then

      # step counter
      (( OLDCOUNT += 1 ))

      # exit loop
      (( OLDCOUNT > 30 )) && break

      # notify user
      infomsg "pull file has already been created: $PULLFILE"

    # create related pull file
    else

      # reset counter
      OLDCOUNT=0

      # set pull information
      PULL_WEB_SRC="$MEDIA"
      PULL_OUT_DIR="../raw/"
      PULL_OUT_MP3="$PULLCORE.mp3"
      PULL_OUT_CFG="$PULLCORE.cfg"
      PULL_DUR_MIN=$(bash "$FEED_FILE" -m)
      PULL_DUR_MAX=$(bash "$FEED_FILE" -M)
      PULL_DUR_CHK="$DURATION"

      # set cfg information
       CFG_BACKGROUND=$(bash "$FEED_FILE" -i)
       CFG_FOREGROUND=$(get_foreground_image "$DATE")
      CFG_COMPRESSION=$(bash "$FEED_FILE" -q)
           CFG_TOPDIR=$(bash "$FEED_FILE" -d)
            CFG_GENRE="Speech"
           CFG_ARTIST=$(bash "$FEED_FILE" -a)
            CFG_ALBUM=$(get_album "$DATE")
             CFG_YEAR=$(get_year "$DATE")
            CFG_TITLE=$(bash "$FEED_FILE" -t "$TITLE" "$AUTHOR" "$DATE")
          CFG_COMMENT=$(bash "$FEED_FILE" -c "$DESCRIPTION")
           CFG_AUTHOR="$AUTHOR"
          CFG_AIRTIME="$DATE"
          CFG_SORTKEY=$(get_sort_key "$FEED_TITLE" "$DATE")

      # create pull file
      show_pull_file > "$PULLDIR$PULLFILE"

      # set executable
      chmod u+x "$PULLDIR$PULLFILE"

      # add ID to database
      echo "$DBENTRY" >> "$DBFILE"

      # show progress
      donemsg "pull file created: $PULLFILE"

    fi

  # item started (skating on thin ice)
  elif [ "$LINE" == "ITEM=BEGIN" ] ; then

    # reset data
    MEDIA=""
    TITLE=""
    AUTHOR=""
    DATE=""
    DESCRIPTION=""
    DURATION=""

  # get information from tagged line
  else

    # split tagged line
    KEY=$(sed -nre "s/^([^=]+)=(.+)/\1/p" <<< "$LINE")
    VAL=$(sed -nre "s/^([^=]+)=(.+)/\2/p" <<< "$LINE")

    # set data
    case "$KEY" in
            "MEDIA")       MEDIA="$VAL" ;;
            "TITLE")       TITLE="$VAL" ;;
           "AUTHOR")      AUTHOR="$VAL" ;;
             "DATE")        DATE="$VAL" ;;
      "DESCRIPTION") DESCRIPTION="$VAL" ;;
         "DURATION")    DURATION="$VAL" ;;
    esac

  fi

done < "$ITEM_FILE"

# keep database sorted
sort -uo "$DBFILE" "$DBFILE"

# signalize success
exit 0

